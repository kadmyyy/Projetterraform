name: Deploy to AWS EC2 with NGINX

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Create VPC
      run: |
        # Créer un VPC
        VPC_ID=$(aws ec2 create-vpc --cidr-block 10.1.0.0/16 --query "Vpc.VpcId" --output text)
        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

        # Ajouter une Gateway Internet au VPC
        IGW_ID=$(aws ec2 create-internet-gateway --query "InternetGateway.InternetGatewayId" --output text)
        aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID

        # Créer une table de routage publique
        ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID --query "RouteTable.RouteTableId" --output text)
        aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID
        echo "ROUTE_TABLE_ID=$ROUTE_TABLE_ID" >> $GITHUB_ENV

    - name: Create Subnets
      run: |
        # Créer un sous-réseau public
        PUBLIC_SUBNET_ID=$(aws ec2 create-subnet --vpc-id ${{ env.VPC_ID }} --cidr-block 10.1.104.0/24 --availability-zone eu-north-1a --query "Subnet.SubnetId" --output text)
        aws ec2 associate-route-table --subnet-id $PUBLIC_SUBNET_ID --route-table-id ${{ env.ROUTE_TABLE_ID }}
        aws ec2 modify-subnet-attribute --subnet-id $PUBLIC_SUBNET_ID --map-public-ip-on-launch
        echo "PUBLIC_SUBNET_ID=$PUBLIC_SUBNET_ID" >> $GITHUB_ENV

        # Créer un sous-réseau privé
        PRIVATE_SUBNET_ID=$(aws ec2 create-subnet --vpc-id ${{ env.VPC_ID }} --cidr-block 10.1.4.0/24 --availability-zone eu-north-1a --query "Subnet.SubnetId" --output text)
        echo "PRIVATE_SUBNET_ID=$PRIVATE_SUBNET_ID" >> $GITHUB_ENV

    - name: Launch EC2 instance with NGINX
      run: |
        # Créer un groupe de sécurité pour permettre les connexions HTTP (port 80) et SSH (port 22)
        SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name "nginx-sg" --description "Allow HTTP and SSH" --vpc-id ${{ env.VPC_ID }} --query "GroupId" --output text)
        aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
        aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0

        # Lancer une instance EC2 Ubuntu dans le sous-réseau public avec NGINX préinstallé
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-06258b3c86f01e8aa \  # Remplacez par l'AMI Ubuntu pour votre région
          --count 1 \
          --instance-type t2.micro \
          --key-name linuxkeypair  # Remplacez par votre clé SSH
          --security-group-ids $SECURITY_GROUP_ID \
          --subnet-id ${{ env.PUBLIC_SUBNET_ID }} \
          --user-data file://nginx-install.sh \
          --query "Instances[0].InstanceId" --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "Instance launched successfully with ID: $INSTANCE_ID"

    - name: Verify EC2 Instance Status
      run: |
        # Vérifiez l'état de l'instance EC2
        aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[0].Instances[0].State.Name"
